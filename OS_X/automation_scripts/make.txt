# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++ 
CC = gcc 

# the static library archiver 
AR = ar rcs

# compiler flags: 
# -g enable debugging 
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# libraries 
# OpenCV
OPENCV_LIBS = `pkg-config --cflags --libs opencv` 

# mac OS X
OS_X_LIBS += -framework ApplicationServices 
OS_X_LIBS += -framework Carbon
OS_X_LIBS += -framework IOKit
OS_X_LIBS += -framework AudioToolbox
OS_X_LIBS += -framework IOSurface

# custom Cocoa libraries
APPLE_SCRIPT_SYSTEM_AUTOMATION_SRC_DIR=../../../../cocoa/AppleScriptSystemAutomation/
APPLE_SCRIPT_SYSTEM_AUTOMATION_STATIC_LIB_PATH=$(APPLE_SCRIPT_SYSTEM_AUTOMATION_SRC_DIR)/libAppleScriptSystemAutomation.a

# custom
ZLIB_LIB_DIR=../../../zlib-1.2.8/outputs/debug/lib
ZLIB_STATIC_LIB_PATH=$(ZLIB_LIB_DIR)/libzlib.a
LIBPNG_LIB_DIR=../../../libpng-1.6.24/outputs/debug/lib
LIBPNG_STATIC_LIB_PATH=$(LIBPNG_LIB_DIR)/liblibpng.a
COMMON_FUNCTIONS_LIB_DIR=../../../common/outputs/debug/lib
COMMON_FUNCTIONS_STATIC_LIB_PATH=$(COMMON_FUNCTIONS_LIB_DIR)/libcommon_functions.a
COCOA_HELPER_LIB_DIR=../cocoa_helper/outputs/debug/lib
COCOA_HELPER_STATIC_LIB_PATH=$(COCOA_HELPER_LIB_DIR)/libcocoa_helper.a
# executable's libraries
COMPARERS_STATIC_LIB_PATH=../../../comparers/outputs/debug/lib/libcomparers.a
UNIT_TESTS_STATIC_LIB_PATH=../../../unit_tests/outputs/debug/lib/libunit_tests.a

# include directories
INCLUDE_DIRS= ./include ../../../zlib-1.2.8/include ../../../libpng-1.6.24/include ../../../common/include ../../../common/libraries ../cocoa_helper/include ../../../comparers/include ../../../unit_tests/include

CFLAGS+= $(foreach d, $(INCLUDE_DIRS), -I$d)
# Apple Script System Automation headers
CFLAGS += -I$(APPLE_SCRIPT_SYSTEM_AUTOMATION_SRC_DIR)/AppleScriptSystemAutomation
# OpenCV headers
CFLAGS += -I/usr/local/include

# the build target executable: 
TARGET = automation_scripts
LIBRARY = libautomation_scripts.a
SHARED_LIBRARY = libautomation_scripts.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= libautomation_scripts.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files 
SOURCE_FILES = automation_scripts.o windows.o events.o display.o audio.o display_stream.o

# test source files 
TEST_SOURCE_FILES = test_audio.o test_display.o test_system_events.o test_windows.o test_display_stream.o test_automation_scripts.o

# output directories 
OUTPUTS_DIR = outputs/debug
OUTPUTS_LIB_DIR = $(OUTPUTS_DIR)/lib
OUTPUTS_BIN_DIR = $(OUTPUTS_DIR)/bin
OUTPUTS_TEST_DIR = $(OUTPUTS_DIR)/test

all: directories libraries $(TARGET)

# make output directories
directories: 
	@mkdir -p $(OUTPUTS_DIR)
	@mkdir -p $(OUTPUTS_LIB_DIR)
	@mkdir -p $(OUTPUTS_BIN_DIR)
	@mkdir -p $(OUTPUTS_TEST_DIR)

libraries: $(LIBRARY) $(SHARED_LIBRARY) $(DYNAMIC_LIBRARY)

$(TARGET): $(LIBRARY) $(TEST_SOURCE_FILES)
	$(CC) $(CFLAGS) -o $(OUTPUTS_BIN_DIR)/$(TARGET) src/main.c $(OUTPUTS_TEST_DIR)/*.o $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OS_X_LIBS) $(ZLIB_STATIC_LIB_PATH) $(LIBPNG_STATIC_LIB_PATH) $(COMMON_FUNCTIONS_STATIC_LIB_PATH) $(COCOA_HELPER_STATIC_LIB_PATH) $(APPLE_SCRIPT_SYSTEM_AUTOMATION_STATIC_LIB_PATH) $(COMPARERS_STATIC_LIB_PATH) $(UNIT_TESTS_STATIC_LIB_PATH) $(OPENCV_LIBS)

$(SHARED_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) $(OS_X_LIBS) -L$(ZLIB_LIB_DIR) -L$(LIBPNG_LIB_DIR) -L$(COMMON_FUNCTIONS_LIB_DIR) -L$(COCOA_HELPER_LIB_DIR) -shared -o $(OUTPUTS_LIB_DIR)/$(SHARED_LIBRARY) $(OUTPUTS_DIR)/*.o -lzlib -llibpng -lcommon_functions -lcocoa_helper $(OPENCV_LIBS) $(APPLE_SCRIPT_SYSTEM_AUTOMATION_STATIC_LIB_PATH)

$(DYNAMIC_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) $(OS_X_LIBS) -L$(ZLIB_LIB_DIR) -L$(LIBPNG_LIB_DIR) -L$(COMMON_FUNCTIONS_LIB_DIR) -L$(COCOA_HELPER_LIB_DIR) -dynamiclib -o $(OUTPUTS_LIB_DIR)/$(DYNAMIC_LIBRARY) $(OUTPUTS_DIR)/*.o -lzlib -llibpng -lcommon_functions -lcocoa_helper $(OPENCV_LIBS) $(APPLE_SCRIPT_SYSTEM_AUTOMATION_STATIC_LIB_PATH)

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OUTPUTS_DIR)/*.o

automation_scripts.o: src/automation_scripts.c include/automation_scripts.h
	$(CC) $(CFLAGS) -c src/automation_scripts.c -o $(OUTPUTS_DIR)/automation_scripts.o

windows.o: src/system/windows.c include/system/windows.h
	$(CC) $(CFLAGS) -c src/system/windows.c -o $(OUTPUTS_DIR)/windows.o

events.o: src/system/events.c include/system/events.h
	$(CC) $(CFLAGS) -c src/system/events.c -o $(OUTPUTS_DIR)/events.o

display.o: src/system/display.c include/system/display.h
	$(CC) $(CFLAGS) -c src/system/display.c -o $(OUTPUTS_DIR)/display.o

audio.o: src/system/audio.c include/system/audio.h
	$(CC) $(CFLAGS) -c src/system/audio.c -o $(OUTPUTS_DIR)/audio.o

display_stream.o: src/system/display_stream.c include/system/display_stream.h
	$(CC) $(CFLAGS) -c src/system/display_stream.c -o $(OUTPUTS_DIR)/display_stream.o

test_audio.o: test/test_audio.c test/test_audio.h 
	$(CC) $(CFLAGS) -c test/test_audio.c -o $(OUTPUTS_TEST_DIR)/test_audio.o

test_display.o: test/test_display.c test/test_display.h
	$(CC) $(CFLAGS) -c test/test_display.c -o $(OUTPUTS_TEST_DIR)/test_display.o

test_system_events.o: test/test_system_events.c test/test_system_events.h
	$(CC) $(CFLAGS) -c test/test_system_events.c -o $(OUTPUTS_TEST_DIR)/test_system_events.o

test_windows.o: test/test_windows.c test/test_windows.h 
	$(CC) $(CFLAGS) -c test/test_windows.c -o $(OUTPUTS_TEST_DIR)/test_windows.o

test_display_stream.o: test/test_display_stream.c test/test_display_stream.h
	$(CC) $(CFLAGS) -c test/test_display_stream.c -o $(OUTPUTS_TEST_DIR)/test_display_stream.o

test_automation_scripts.o: test/test_automation_scripts.c test/test_automation_scripts.h 
	$(CC) $(CFLAGS) -c test/test_automation_scripts.c -o $(OUTPUTS_TEST_DIR)/test_automation_scripts.o

clean: 
	$(RM) -rf $(OUTPUTS_DIR)