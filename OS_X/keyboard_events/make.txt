# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++
CC = gcc

# the static library archiver
AR = ar rcs

# compiler flags: 
# -g enable debugging 
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99 

# libraries 
# mac OS X
OS_X_LIBS += -framework ApplicationServices

# custom
COCOA_HELPER_LIB_DIR=../cocoa_helper/outputs/debug/lib
COCOA_HELPER_STATIC_LIB_PATH=$(COCOA_HELPER_LIB_DIR)/libcocoa_helper.a
AUTOMATION_SCRIPTS_LIB_DIR=../automation_scripts/outputs/debug/lib
AUTOMATION_SCRIPTS_STATIC_LIB_PATH=$(AUTOMATION_SCRIPTS_LIB_DIR)/libautomation_scripts.a

# include directories
INCLUDE_DIRS= ./include ../cocoa_helper/include ../automation_scripts/include
CFLAGS+= $(foreach d, $(INCLUDE_DIRS), -I$d)

# the build target executable:  
TARGET = keyboard_events
LIBRARY = libkeyboard_events.a
SHARED_LIBRARY = libkeyboard_events.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= libkeyboard_events.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files
SOURCE_FILES = keyboard_events.o hot_keys_events.o symbolic_hot_keys.o

# test source files
TEST_SOURCE_FILES =

# outputs directories
OUTPUTS_DIR = outputs/debug
OUTPUTS_LIB_DIR = $(OUTPUTS_DIR)/lib
OUTPUTS_BIN_DIR = $(OUTPUTS_DIR)/bin
OUTPUTS_TEST_DIR = $(OUTPUTS_DIR)/test

all: directories libraries $(TARGET)

# make outputs directories
directories: 
	@mkdir -p $(OUTPUTS_DIR)
	@mkdir -p $(OUTPUTS_LIB_DIR)
	@mkdir -p $(OUTPUTS_BIN_DIR)
	@mkdir -p $(OUTPUTS_TEST_DIR)

libraries: $(LIBRARY) $(SHARED_LIBRARY) $(DYNAMIC_LIBRARY)

$(TARGET): $(LIBRARY) $(TEST_SOURCE_FILES)
	$(CC) $(CFLAGS) -o $(OUTPUTS_BIN_DIR)/$(TARGET) src/main.c $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OS_X_LIBS) $(COCOA_HELPER_STATIC_LIB_PATH) $(AUTOMATION_SCRIPTS_STATIC_LIB_PATH)

$(SHARED_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) $(OS_X_LIBS) -L$(COCOA_HELPER_LIB_DIR) -L$(AUTOMATION_SCRIPTS_LIB_DIR) -shared -o $(OUTPUTS_LIB_DIR)/$(SHARED_LIBRARY) $(OUTPUTS_DIR)/*.o -lcocoa_helper -lautomation_scripts

$(DYNAMIC_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) $(OS_X_LIBS) -L$(COCOA_HELPER_LIB_DIR) -L$(AUTOMATION_SCRIPTS_LIB_DIR) -dynamiclib -o $(OUTPUTS_LIB_DIR)/$(DYNAMIC_LIBRARY) $(OUTPUTS_DIR)/*.o -lcocoa_helper -lautomation_scripts

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OUTPUTS_DIR)/*.o

keyboard_events.o: src/keyboard_events.c include/keyboard_events.h include/virtual_key_codes.h
	$(CC) $(CFLAGS) -c src/keyboard_events.c -o $(OUTPUTS_DIR)/keyboard_events.o

hot_keys_events.o: src/hot_keys_events.c include/hot_keys_events.h
	$(CC) $(CFLAGS) -c src/hot_keys_events.c -o $(OUTPUTS_DIR)/hot_keys_events.o

symbolic_hot_keys.o: src/symbolic_hot_keys.c include/symbolic_hot_keys.h
	$(CC) $(CFLAGS) -c src/symbolic_hot_keys.c -o $(OUTPUTS_DIR)/symbolic_hot_keys.o

clean: 
	$(RM) -rf $(OUTPUTS_DIR)