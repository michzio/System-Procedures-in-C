# Makefile for UNIX

# the compiler: gcc for C program, define as g++ for C++
CC = gcc

# the static library archiver
AR = ar rcs

# compiler flags:
# -g enable debugging
# -Wall turn on all warnings
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers
# -ansi don't use GNU extensions, stick to ANSI
# -std=c99 use newer version
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# libraries
# OS X
OS_X_LIBS += -framework ApplicationServices

# the build target executable:
TARGET = mouse_events
LIBRARY = libmouse_events.a
SHARED_LIBRARY = libmouse_events.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= libmouse_events.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files
SOURCE_FILES = mouse_events.o scroll_wheel_events.o

# test source files
TEST_SOURCE_FILES =

# output directories 
OUTPUT_DIR = output/debug
OUTPUT_LIB_DIR = $(OUTPUT_DIR)/lib
OUTPUT_STATIC_LIB_DIR = $(OUTPUT_LIB_DIR)/static
OUTPUT_BIN_DIR = $(OUTPUT_DIR)/bin

all: directories libraries $(TARGET)

# make output directories
directories: 
	@mkdir -p $(OUTPUT_DIR)
	@mkdir -p $(OUTPUT_LIB_DIR)
	@mkdir -p $(OUTPUT_STATIC_LIB_DIR)
	@mkdir -p $(OUTPUT_BIN_DIR)

libraries: $(LIBRARY)

$(TARGET): $(LIBRARY) $(TEST_SOURCE_FILES)
	$(CC) $(CFLAGS) -o $(OUTPUT_BIN_DIR)/$(TARGET) main.c $(OUTPUT_STATIC_LIB_DIR)/$(LIBRARY) $(OS_X_LIBS)

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUT_STATIC_LIB_DIR)/$(LIBRARY) $(OUTPUT_DIR)/*.o

mouse_events.o: mouse_events.c mouse_events.h
	$(CC) $(CFLAGS) -c mouse_events.c -o $(OUTPUT_DIR)/mouse_events.o

scroll_wheel_events.o: scroll_wheel_events.c scroll_wheel_events.h
	$(CC) $(CFLAGS) -c scroll_wheel_events.c -o $(OUTPUT_DIR)/scroll_wheel_events.o

clean:
	$(RM) -rf $(OUTPUT_DIR)